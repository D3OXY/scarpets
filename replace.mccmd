/script run 

global_positions = l(null, null);
global_all_set = false;
global_armor_stands = l(null, null);
global_show_pos = true;


__mark(i, position) -> (
 	colours = l('red', 'lime'); 
	e = create_marker('pos' + i, position + l(0.5, 0.5, 0.5), colours:(i-1) + '_concrete');
	run(str(
		'data merge entity %s {Glowing:1b, Fire:32767s, Marker:1b}', query(e, 'uuid')
		));
	put(global_armor_stands, i-1, query(e, 'id'));
);


set_pos(i) -> (
	try(
 		if( !reduce(range(1,3), _a + (_==i), 0),
			throw();
		),
		print('Input must be either 1 or 2 for position to set. You input ' + i);
		return()
	);

	tha_block = query(player(), 'trace');
	if(tha_block!=null,
		tha_pos = pos(tha_block),
		tha_pos = map(pos(player()), round(_))
	);
	global_positions:(i-1) = tha_pos;
	if(all(global_positions, _!=null), global_all_set = true);


	print(str('Set your position %d to ',i) + tha_pos);

	if(global_show_pos,
		e = entity_id(global_armor_stands:(i-1));
 		if(e != null, modify(e, 'remove'));
		__mark(i, tha_pos);
	);

);


get_pos() -> (
	for(global_positions, 
 		print(str('Position %d is %s', 
				_i+1, if(_==null, 'not set', _)));
 	)
);


toggle_show_pos() ->(
	global_show_pos = !global_show_pos;
	if(global_show_pos,
		(
			for(global_positions, 
				if(_!=null, __mark( (_i+1) , _) );
			);
			print('Positions shown');
		),
		(
			for(global_armor_stands,
				e = entity_id(_);
				if(e != null, modify(e, 'remove'));
			);
			print('Positions hidden');
		);
	);
);


$ __on_player_clicks_block(player, block, face) -> (
$	if(query(player(), 'holds'):0 == 'golden_sword',
$		set_pos(1);
$	);
$ );

$ __on_player_uses_item(player, item_tuple, hand) -> (
$	if(query(player(), 'holds'):0 == 'golden_sword',
$		set_pos(2);
$	);
$ );

$ __on_tick_nether() -> (
$	if(global_all_set && global_show_pos && tick_time()%20 == 0, 
$		particle_rect('end_rod', global_positions:0, global_positions:1)
$	);
$ );


$ __get_states(b) -> (
$	properties = block_properties(pos(b));
$	pairs = map(properties, l(_, property(pos(b), _)) );
$ );

$ __make_properies_string(pairs) -> (
$	if( pairs,
$		props_str = join(',', map(pairs, str('%s="%s"', _:0, _:1)) ),
$		props_str = '',
$	);
$ );

$ __set_with_state(b, replace) -> (
$	pairs = __get_states(b);
$	properties_string = __make_properies_string(pairs);
$	set(b, block(str('%s[%s]', replace, properties_string)) );
$ );

$ __replace_one_block(b, to_replace, replace_with) -> (
$ 	if(b == to_replace, 
$		__set_with_state(b, replace_with)
$	);
$ );

$ __replace_one_block_filt(b, to_replace, replace_with, property, value) -> (
$ 	if(b == to_replace && property(b, property)==value, 
$		__set_with_state(b, replace_with)
$	);
$ );

$ replace_volume() -> (
$ 	to_replace = query(player(), 'holds', 'offhand'):0;
$	replace_with = query(player(), 'holds', 'mainhand'):0;

$	if(!global_all_set, return('Missing positions. Set two positions before replacing.'));

$	print(str('Replacing %s with %s', to_replace, replace_with));
$	volume(global_positions:0:0, global_positions:0:1, global_positions:0:2,
$		 global_positions:1:0, global_positions:1:1, global_positions:1:2,
$		(
$			__replace_one_block(_, to_replace, replace_with)
$		);
$	);
$ );

$ replace_volume_filt(property, value) -> (
$ 	to_replace = query(player(), 'holds', 'offhand'):0;
$	replace_with = query(player(), 'holds', 'mainhand'):0;

$	if(!global_all_set, return('Missing positions. Set two positions before replacing.'));

$	print(str('Replacing %s with %s', to_replace, replace_with));
$	volume(global_positions:0:0, global_positions:0:1, global_positions:0:2,
$		 global_positions:1:0, global_positions:1:1, global_positions:1:2,
$		(
$			__replace_one_block_filt(_, to_replace, replace_with, property, value)
$		);
$	);
$ );
